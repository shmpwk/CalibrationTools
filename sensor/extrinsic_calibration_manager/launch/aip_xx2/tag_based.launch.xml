<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="rviz" />

  <let name="calibration_lidar" value="at_128"/>

  <let name="lidar_frame" value="pandar_64" if="$(eval &quot;'$(var calibration_lidar)' == 'pandar_64' &quot;)"/> 
  <let name="lidar_frame" value="at_128" if="$(eval &quot;'$(var calibration_lidar)' == 'at_128' &quot;)"/>

  <let name="parent_frame" value="sensor_kit_base_link" if="$(eval &quot;'$(var calibration_lidar)' == 'pandar_64' &quot;)"/>
  <let name="parent_frame" value="$(var lidar_frame)" if="$(eval &quot;'$(var calibration_lidar)' == 'at_128' &quot;)"/>  
  
  <let name="camera_name" value="c1"/>
  
  <let name="image_topic" value="/sensing/camera/$(var camera_name)/image_raw" />
  <let name="camera_info_topic" value="/sensing/camera/$(var camera_name)/camera_info" />

  <let name="pointcloud_topic" value="/sensing/lidar/top/pointcloud_raw"  if="$(eval &quot;'$(var calibration_lidar)' == 'pandar_64' &quot;)" />
  <let name="pointcloud_topic" value="/sensing/lidar/at_128/pointcloud_raw"  if="$(eval &quot;'$(var calibration_lidar)' == 'at_128' &quot;)" />

  <let name="camera_frame" value="c1/camera_link" />

  <let name="rviz_profile" value="" />
  <let name="rviz_profile" value="$(find-pkg-share extrinsic_tag_based_calibrator)/rviz/tag_calib_c1_pandar64.rviz" if="$(eval &quot;'$(var calibration_lidar)' == 'pandar_64' &quot;)" />
  <let name="rviz_profile" value="$(find-pkg-share extrinsic_tag_based_calibrator)/rviz/tag_calib_c1_at128.rviz" if="$(eval &quot;'$(var calibration_lidar)' == 'at_128' &quot;)" />
  
  <let name="lidar_model" value="pandar64" if="$(eval &quot;'$(var calibration_lidar)' == 'pandar_64' &quot;)"/>
  <let name="lidar_model" value="at128" if="$(eval &quot;'$(var calibration_lidar)' == 'at_128' &quot;)"/>

  <!-- the camera info and image have camera0, which is incorrect in this project-->
  <node pkg="tf2_ros" exec="static_transform_publisher" name="fake_camera_link" output="screen" args="0 0 0 0 0 0 c1/camera_optical_link camera0/camera_optical_link"/>

  <node pkg="tf2_ros" exec="static_transform_publisher" name="base_to_sensor_kit" output="screen" args="--frame-id base_link --child-frame-id sensor_kit_base_link --x 0.6 --y 0.0 --z 1.4 --qx 0.0 --qy 0.0 --qz 0.0 --qw 1.0"/>
  <node pkg="tf2_ros" exec="static_transform_publisher" name="sensor_kit_to_lidar_base" output="screen" args="--frame-id sensor_kit_base_link --child-frame-id pandar_64_base_link  --x 0.49 --y 0.05 --z 0.3 --qx 0.0 --qy 0.0 --qz 0.9997286528513666 --qw 0.02329421962615999"/>
  <node pkg="tf2_ros" exec="static_transform_publisher" name="lidar_base_to_lidar" output="screen" args="--frame-id pandar_64_base_link --child-frame-id pandar_64  --x 0.6 --y 0.0 --z 0.047 --qx 0.0 --qy 0.0 --qz 0.0 --qw 1.0"/>

  <node pkg="tf2_ros" exec="static_transform_publisher" name="sensor_kit_to_camera" output="screen" args="--frame-id sensor_kit_base_link --child-frame-id c1/camera_link  --x 1.0 --y 0.2 --z 0.3 --qx 0.0 --qy 0.0 --qz 0.0 --qw 1.0"/>
  <node pkg="tf2_ros" exec="static_transform_publisher" name="camera_to_optical_link" output="screen" args="--frame-id c1/camera_link --child-frame-id c1/camera_optical_link --x 0.0 --y 0.0 --z 0.0 --qx 0.5 --qy -0.5 --qz 0.5 --qw -0.5"/>

  <node pkg="image_transport_decompressor" exec="image_transport_decompressor_node" name="image_transport_decompressor_node" output="screen">
    <remap from="/image_transport_decompressor_node/input/compressed_image" to="$(var image_topic)/compressed" />
    <remap from="/image_transport_decompressor_node/output/raw_image" to="$(var image_topic)" />
  </node>

  <!-- extrinsic_calibration_client -->
  <arg name="src_yaml" default="$(env HOME)/initial_xx2.yaml" />
  <arg name="dst_yaml" default="$(env HOME)/calibrated_xx2.yaml" />

  <node pkg="extrinsic_calibration_client" exec="extrinsic_calibration_client" name="extrinsic_calibration_client" output="screen">
    <param name="src_path" value="$(var src_yaml)" />
    <param name="dst_path" value="$(var dst_yaml)" />
  </node>

  <!-- extrinsic_calibration_manager -->
  <node pkg="extrinsic_calibration_manager" exec="extrinsic_calibration_manager" name="extrinsic_calibration_manager" output="screen">
    <param name="parent_frame" value="$(var parent_frame)" />
    <param name="child_frames" value="
    [$(var camera_frame)]" />
  </node>

  <!-- tag based calibrator -->
  <include file="$(find-pkg-share extrinsic_tag_based_calibrator)/launch/calibrator.launch.xml">
    <arg name="ns" value="$(var parent_frame)/$(var camera_name)/camera_link" />
    <arg name="parent_frame" value="$(var parent_frame)" />
    <arg name="child_frame" value="$(var camera_frame)" />
    <arg name="image_topic" value="$(var image_topic)" />
    <arg name="camera_info_topic" value="$(var camera_info_topic)" />
    <arg name="pointcloud_topic" value="$(var pointcloud_topic)" />
    <arg name="pointcloud_topic_ex" value="$(var camera_info_topic)" />
    <arg name="lidar_model" value="$(var lidar_model)" />
    <arg name="base_frame" value="$(var parent_frame)" />
  </include>

  <!-- interactive calibrator -->
  <group>
    <push-ros-namespace namespace="$(var parent_frame)/$(var camera_frame)" />

    <node pkg="extrinsic_interactive_calibrator" exec="interactive_calibrator" name="interactive_calibrator" output="screen" >
      <remap from="pointcloud" to="$(var pointcloud_topic)" />
      <remap from="image" to="$(var image_topic)" />
      <remap from="camera_info" to="$(var camera_info_topic)" />
      <remap from="calibration_points_input" to="calibration_points" />
      <param name="use_compressed" value="false" />
      <param name="camera_parent_frame" value="$(var parent_frame)" />
      <param name="camera_frame" value="$(var camera_frame)" />
      <param name="use_calibration_api" value="false" />
      <param name="can_publish_tf" value="false" />
    </node>

    <include file="$(find-pkg-share intrinsic_camera_calibration)/launch/optimizer.launch.xml">
    </include>
    <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_profile)" if="$(var rviz)" />
  </group>

</launch>
